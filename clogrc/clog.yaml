---
# yamllint disable rule:colons
# clog Jumbo --font small "www-metarex-media-com"
#                                                  _                                                     _   _
#  __ __ __ __ __ __ __ __ __  ___   _ __    ___  | |_   __ _   _ _   ___  __ __  ___   _ __    ___   __| | (_)  __ _
#  \ V  V / \ V  V / \ V  V / |___| | '  \  / -_) |  _| / _` | | '_| / -_) \ \ / |___| | '  \  / -_) / _` | | | / _` |
#   \_/\_/   \_/\_/   \_/\_/        |_|_|_| \___|  \__| \__,_| |_|   \___| /_\_\       |_|_|_| \___| \__,_| |_| \__,_|
#                      ⇓⇓⇓⇓⇓⇓⇓⇓⇓
# ALL KEYS ARE    ⇒⇒  lowercase    ⇐⇐  only. THIS IS A VIPER SETTING.
#                      ⇑⇑⇑⇑⇑⇑⇑⇑⇑
# #############################################################################
#                      __   _
#   __   ___   _ _    / _| (_)  __ _
#  / _| / _ \ | ' \  |  _| | | / _` |
#  \__| \___/ |_||_| |_|   |_| \__, |
#                              |___/
# -----------------------------------------------------------------------------
clog:
  # path to the yaml file defining release history - see semver package
  releases-path: "assets/data/releases.yaml"

# #############################################################################
#               _                       _
#   ||_  _ _   (_)  _ __   _ __   ___  | |_   ___
#  (_-< | ' \  | | | '_ \ | '_ \ / -_) |  _| (_-<
#  / _/ |_||_| |_| | .__/ | .__/ \___|  \__| /__/
#   ||             |_|    |_|
# -----------------------------------------------------------------------------
snippets:
  # build control - see core via clog Init
  bc-main-repo: echo "mrmxf/clog-mrmxf"
  bc-instagram: |
    eval "$(clog Crayon)" # setting & highlights
    clog Log -W  "    ✖️ $cC clog instagram$cI $*$cX not implemented yet - come back later"
    exit 0
    # worker function - main website -----------------------------------------------------------------------------------
  bc-main-checkout: |
    eval "$(clog Source project config); $(clog Crayon)" # setting & highlights
    doPROD="$1"
    modeMSG="$2"
    vMain="$(clog bc-prod-version)"

    ERR=0
    clog Log -I "$STEP.$(((++s))).⚒️  bc-main-checkout  $modeMSG→$cF setup queries for daily build/"
    [ -z "vMain" ]&&clog Log -E "releases.yaml has no entry with type=main build=prod"&&exit (((++ERR)))
    git checkout "vMain"
    [ $? -gt 0 ]&&clog Log -E "cannot checkout to tag $cE$vMain"&&exit (((++ERR)))

    # we are now checked out to the production snapshot $vMain
    # releases.yaml and scripts
    clog instagram fetch metarex latest tmp/insta-mrx
  # worker function ko (dev)-----------------------------------------------------------------------------------------------
  bc-ko: |
    eval "$(clog Source project config); $(clog Crayon)" # setting & highlights
    doPROD="$1"
    modeMSG="$2"

    ERR=0
    clog Log -I "$STEP.$(((++s))).⚒️  build ko $modeMSG→$cU hub.docker.com/$DOCKER_NS$cX"

    [ -z "$doPROD" ] && devTAG="-dev"
    [ -n "$(clog bc-wants-stage-flow)" ]&& stageTAG="-stage"
    
    tag1="$(clog git tag ref)$devTAG" # 1.2.3 | 1.2.3-stage | 1.2.3-stage-dev
    tag2="latest$stageTAG$devTAG"     # latest | latest-stage | latest-dev | latest-stage-dev

    # config is in .ko.yaml
    # use the default docker repo unless told otherwise
    [ -z "$KO_DOCKER_REPO" ] && KO_DOCKER_REPO="$DOCKER_NS"
    export KO_DOCKER_REPO                                      # push to repo
    export KO_CONFIG_PATH=".ko.yaml"                           # build options
    export KO_DATA_DATE_EPOCH=$(git log -1 --format='%ct')     # date on image

    ko build --base-import-paths --sbom=none --tags "$tag1" --tags "$tag2" .
    if [ $? -gt 0 ]; then
      msg="ko build failed $cE $PROJECT$cX:$cW$tag1$cX and ${cW}$tag2"
      clog Log -E "$msg"
      printf "$msg" > /tmp/clog-notify
      exit 1
    fi
    msg="multi-arch ko build$cF $PROJECT$cX:$cW$tag1$cX and ${cW}$tag2"
    clog Log -S "$msg"
    printf "$msg" > /tmp/clog-notify

  # ui build function
  build: |
    export VERB="Build"
    export CHK="pre-build build"
    export MAKE="hugo ko"; [[ "MAKE" == "$1" ]] && MAKE="$2"
    export EXE="podserver"
    export TITLE="podserver"
    clog bc-flowx                     # use the generic flow script

  git:
    # get the target version for this project from releases.yaml
    tag:
      ref: yq -r '.[0].version' "$(clog bc-releases-yaml)"
      # a go package needs a preceding "v"
      refgo: echo "v$(clog git tag ref)"
    message:
      ref: yq -r '.[0].note' "$(clog bc-releases-yaml)"
    suffix: |
      b="$(git branch --show-current)"
      [[ "$b" == main ]] && echo "" || echo "$b"|tr -d '[:blank:]'
  project:
    config: |
      # make some variables for standard build scripts
      export PROJECT="$(basename $(pwd))"              # project you're building
    has:
      git-lfs: |
        git lfs --version 2>/dev/null|grep -oE '[0-9]+\.[0-9]+\.[0-9]+'|head -1
      golang: |
        go version|grep -oE '[0-9]+\.[0-9]+\.[0-9]+'
      hugo: |
        hugo version|grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+'
    needs:
      git-lfs: echo "3.6.1"
      # grab the golang version from go.mod
      golang: cat go.mod|grep '^go '|grep -oE '[0-9]\.[0-9]+\.[0-9]+'
      # hunt for the hugo version
      hugo: |
        # grab the version from configuration
        if [ -f hugo.yaml ];then
          yq -r '.module.hugoVersion.min' hugo.yaml
        elif [ -f config/_default/module.yaml ];then
          yq -r '.hugoVersion.min' config/_default/module.yaml
        else
          echo "hugo config not found"
        fi
# =============================================================================
#    ___   _                 _
#   / __| | |_    ___   __  | |__
#  | (__  | ' \  / -_) / _| | / /
#   \___| |_||_| \___| \__| |_\_\
# -----------------------------------------------------------------------------
check:
  build:
    blocks:
      - name: wsl Zone.Identifier files
        try: |
          [ -n "$(find . -name '*Zone.Identifier')"]
        ok: clog Log -I "no Zone.Identifier present"
        catch: |
          eval "$(clog Crayon)"
          n=$(find . -name '*Zone.Identifier'|wc -l)
          clog Log -E "Delete $n Zone.Identifier files made by Windows"
          while IFS= read -r line; do
            fn="$(echo ${line:2}|cut  -d ":" -f "1")"
            id="$(echo ${line:2}|cut  -d ":" -f "2")"
            clog Log -E "      ❌$cF $fn$cX:$cW$id"
          done < <(find . -name '*Zone.Identifier')
      - name: golang version
        try: |
          [[ "$(clog project needs golang)" == "$(clog project has golang)" ]]
        ok: clog Log -I "golang $(clog project has golang) is up to date"
        catch: |
          clog Log -W "golang: bad version. go.mod needs $(clog project needs golang), got $(clog project has golang)"
      - name: hugo version
        try: |
          [[ "$(clog project needs hugo)" == "$(clog project has hugo)" ]]
        ok: clog Log -I "hugo $(clog project has hugo) is up to date"
        catch: |
          clog Log -W "hugo: bad version. Need $(clog project needs hugo), got $(clog project has hugo)"
      - name: git-lfs version
        try: |
          [[ "$(clog project has git-lfs)"  == "$(clog project needs git-lfs)" ]]
        ok: clog Log -I "git-lfs $(clog project has git-lfs) good"
        catch: |
          clog Log -W "git-lfs: bad version. Need $(clog project needs git-lfs), got $(clog project has git-lfs)"
      - name: docker?
        try: which docker 2>/dev/null
        ok: clog Log -I "docker ok"
        catch: clog Log -E "docker not on path"
      # - name: docker-login
      #   try: |
      #     docker manifest inspect metarex-media/www-metarex-media > /dev/null 2>&1
      #   ok: clog Log -I "you can access the docker hub to push images"
      #   catch: clog Log -E "cannot access hub metarex-media/www-metarex-media - login as metarex!"

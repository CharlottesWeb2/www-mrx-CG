---
# yamllint disable rule:colons
# clog Jumbo --font small "www-metarex-media-com"
#                                                  _                                                     _   _        
#  __ __ __ __ __ __ __ __ __  ___   _ __    ___  | |_   __ _   _ _   ___  __ __  ___   _ __    ___   __| | (_)  __ _ 
#  \ V  V / \ V  V / \ V  V / |___| | '  \  / -_) |  _| / _` | | '_| / -_) \ \ / |___| | '  \  / -_) / _` | | | / _` |
#   \_/\_/   \_/\_/   \_/\_/        |_|_|_| \___|  \__| \__,_| |_|   \___| /_\_\       |_|_|_| \___| \__,_| |_| \__,_|
#                      ⇓⇓⇓⇓⇓⇓⇓⇓⇓
# ALL KEYS ARE    ⇒⇒  lowercase    ⇐⇐  only. THIS IS A VIPER SETTING.
#                      ⇑⇑⇑⇑⇑⇑⇑⇑⇑
### when clog starts it uses these config values to override clog defaults.
clog:
  # path to the yaml file defining release history - see semver package
  releases-path: "assets/data/releases.yaml"

# --- shell snippets for this project -----------------------------------------
snippets:
  releases-path: yq -r '.clog."releases-path"' clogrc/clog.config.yaml
  build-type: yq -r '.[0].build' "$(clog releases-path)"
  release-type:  yq -r '.[0].version' "$(clog releases-path)"|grep -oE 'stage'
  build-hugo: |
    eval "$(clog Crayon)"
    clog Log -I "$step.$(((s+=1))). building hugo content"
    [ ! -d content ] && clog Log -E "$step.$(((s+=1))). no content/ folder" && exit 1
    clog Log -I "$step.$(((s+=1))). purging kodata/ and building site"
    rm -rf kodata/*
    opt=""
    [[ "dev" == "$(clog build-type)" ]]  && opt="$opt --buildDrafts --buildFuture --buildExpired"
    clog Log -I "$step.$(((s+=1))). building hugo to$cF kodata/$cT folder$cC $opt"
    hugo build --minify --logLevel info $opt
  build-podserver: |
    eval "$(clog Crayon)"
    helper="core/sh/help-golang.sh"    # build helpers
    eval "$(clog Cat $helper)"
    clog Log -I "$step.$(((s+=1))). building podserver to$cF tmp/"
    fGoBuild tmp/podserver-amd-lnx     linux   amd64
    fGoBuild tmp/podserver-arm-lnx     linux   arm64
    fGoBuild tmp/podserver-arm-mac     darwin  arm64
    [ $? -eq 0 ] && clog Log -I "stand-alone podserver exe built to$cF tmp/"
  build-ko: |
    eval "$(clog Crayon)"
    clog Log -I "$step.$(((s+=1))). build & push with ko to docker"

    tag1="$(clog git tag ref)"
    tag2="latest"
    [[ "-stage" == "${tag1:(-6)}" ]] &&tag2="latest-stage"

    # config is in .ko.yaml
    # use the default docker repo unless told otherwise
    [ -z "$DOCKER_NS" ] && DOCKER_NS="mrmxf"
    [ -z "$KO_DOCKER_REPO" ] && KO_DOCKER_REPO="$DOCKER_NS"
    export KO_DOCKER_REPO
    export KO_CONFIG_PATH=".ko.yaml"
    # ensure that dates are added to the images
    export KO_DATA_DATE_EPOCH=$(git log -1 --format='%ct')
    ko build --base-import-paths --tags "$tag1" --tags "$tag2" .
    
    clog Log -I "multi-arch docker build$cF $PROJECT$cT:$cW$tag1$cT and ${cW}$tag2"

  build: |
    isDev="$1"
    export MAKE="hugo podserver ko"
    [ -n "$isDev" ] && [ -z "$2" ] && MAKE="$2"
    clog Log -I  "build $cS $PROJECT$cT components: $cC $MAKE"
    eval "$(clog Source project config)"

    ERR=0
    clog Check pre-build; ERR=$((ERR+$?))
    clog Check build; ERR=$((ERR+$?))
    [ $ERR -gt 0 ] && [ -n "$isDev" ] && clog log -W "==== DEV mode - ignoring errors ===="
    [ $ERR -gt 0 ] && [ -z "$isDev" ] && clog log -E "Check errors - aborting" && exit 1

    eval "$(clog Crayon)"
    clog Log -I  "=== === ===== === ===== === ===== === ===== === ===== === =="
    export step=0
    ((step++));clog Should MAKE "hugo"      && clog build-hugo
    ((step++));clog Should MAKE "podserver" && clog build-podserver
    ((step++));clog Should MAKE "ko"        && clog build-ko
    clog Log -I "   build complete"
  watch: hugo server --port=1313 --logLevel debug --buildDrafts --buildFuture --buildExpired --cleanDestinationDir
  git:
    # get the target version for this project from releases.yaml
    tag:
      ref: yq -r '.[0].version' "$(clog releases-path)"
      # a go package needs a preceding "v"
      refgo: echo "v$(clog git tag ref)"
    message:
      ref: yq -r '.[0].note' "$(clog releases-path)"
    suffix: |
      b="$(git branch --show-current)"
      [[ "$b" == main ]] && echo "" || echo "$b"|tr -d '[:blank:]'
  project:
    config: |
      # make some variables for standard build scripts
      export PROJECT="$(basename $(pwd))"              # project you're building
      export DOCKER_NS=mrmxf
    has:
      git-lfs: |
        git lfs --version|grep -oE '[0-9]+\.[0-9]+\.[0-9]+'|head -1
      golang: |
        go version|grep -oE '[0-9]+\.[0-9]+\.[0-9]+'
      hugo: |
        hugo version|grep -oE '[0-9]+\.[0-9]+\.[0-9]+'
    needs:
      git-lfs: echo "3.6.1"
      # grab the golang version from go.mod
      golang: cat go.mod|grep '^go '|grep -oE '[0-9]\.[0-9]+\.[0-9]+'
      # hunt for the hugo version
      hugo: |
        # grab the version from configuration
        if [ -f hugo.yaml ];then
          yq -r '.module.hugoVersion.min' hugo.yaml
        elif [ -f config/_default/module.yaml ];then
          yq -r '.hugoVersion.min' config/_default/module.yaml
        else
          echo "hugo config not found"
        fi
# =============================================================================
#    ___   _                 _
#   / __| | |_    ___   __  | |__
#  | (__  | ' \  / -_) / _| | / /
#   \___| |_||_| \___| \__| |_\_\
# -----------------------------------------------------------------------------
check:
  build:
    blocks:
      - name: golang version
        try: |
          [[ "$(clog project needs golang)" == "$(clog project has golang)" ]]
        ok: clog Log -I "golang $(clog project has golang) is up to date"
        catch: |
          clog Log -W "golang: bad version. Need $(clog project needs golang), got $(clog project has golang)"
      - name: hugo version
        try: |
          [[ "$(clog project needs hugo)" == "$(clog project has hugo)" ]]
        ok: clog Log -I "hugo $(clog project has hugo) is up to date"
        catch: |
          clog Log -W "hugo: bad version. Need $(clog project needs hugo), got $(clog project has hugo)"
      - name: git-lfs version
        try: |
          [[ "$(clog project has git-lfs)"  == "$(clog project needs git-lfs)" ]]
        ok: clog Log -I "git-lfs $(clog project has git-lfs) good"
        catch: |
          clog Log -W "git-lfs: bad version. Need $(clog project needs git-lfs), got $(clog project has git-lfs)"
      - name: docker?
        try: which docker 2>/dev/null
        ok: clog Log -I "docker ok"
        catch: clog Log -E "docker not on path"
      # - name: docker-login
      #   try: |
      #     docker manifest inspect metarex-media/www-metarex-media > /dev/null 2>&1
      #   ok: clog Log -I "you can access the docker hub to push images"
      #   catch: clog Log -E "cannot access hub metarex-media/www-metarex-media - login as metarex!"
